// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// https://authjs.dev/reference/adapter/prisma
model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    favoriteIds    String[]  @db.ObjectId

    accounts      Account[]
    sessions      Session[]
}
model Session {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken    String   @unique
    expires         DateTime
    user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String  @db.ObjectId
}


model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    @@unique([provider, providerAccountId])
}

model Season{
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt  

  seasonId       Int
  className      String
  seasonImg      String

  players        Player[]
}

model Player {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt  
  
  pId            Int
  name           String
      
  seasonId       String  @db.ObjectId
  season         Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
}

